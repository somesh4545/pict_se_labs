#include <GL/glut.h>
#include <iostream>

using namespace std;

int r;

void putPixel(int x, int y){
    glBegin(GL_POINTS);
    glVertex2i(x, y);
    glEnd();
}

void drawLine(int x1, int y1, int x2, int y2){
    glColor3b(1, 0, 0);

    int dx, dy, p, x, y;

    dx = abs(x2 - x1);
    dy = abs(y2 - y1);

    x = min(x1, x2);
    y = min(y1, y2);
    
    if(dx > dy){
        p = 2*dy-dx;

        for(int i=0; i<dx; i++){
            if(p>=0){
                y++;
                p += 2*(dy-dx);
            }else{
                p += 2*dy;
            }
            putPixel(x, y);
            x++;
        }
    }else{
        p = 2*dx - dy;
        for(int i=0; i<dy; i++){
            // cout << x << " " << y <<endl;
            if(p>=0){
                x++;
                p += 2*(dx-dy);
            }else{
                p+= 2*dx;
            }
            putPixel(x, y);
            y++;
        }
    }
    

    glFlush();

}


void drawCirclePoints(int xc, int yc, int x, int y){
    glColor3f(1, 0, 1);
    glBegin(GL_POINTS);
    glVertex2i(xc+x, yc+y);
    glVertex2i(xc-x, yc+y);
    glVertex2i(xc+x, yc-y);
    glVertex2i(xc-x, yc-y);
    glVertex2i(xc+y, yc+x);
    glVertex2i(xc-y, yc+x);
    glVertex2i(xc+y, yc-x);
    glVertex2i(xc-y, yc-x);
    glEnd();
    glFlush();
}

void drawCircle(){
    cout << "Enter circle radius: ";
    cin >> r;
    r *= 10;
    int cx, cy, x, y;
    x = 0;
    y = r;
    cout << "Enter x coordinate: ";
    cin >> cx;
    cout << "Enter y coordinate: ";
    cin >> cy;
    int d = 3-2*r;
    drawCirclePoints(cx, cy, x, y);
    while(y>=x){
        x++;
        if(d>0){
            y--;
            d += 4*(x-y)+10;
        }else{
            d+= 4*x + 6;
        }
        drawCirclePoints(cx, cy, x, y);
    }
}

void keyboard(unsigned char ch, int x, int y){
    switch (ch)
    {
    case 'l':
        drawLine(100, 10,500, 200);
        drawLine(250, 250, 0, 0);
        drawLine(10, 100, 50, 400);
        break;
    case 'c':
        drawCircle();
        break;
    
    default:
        break;
    }
}

void display(){
    glClearColor(1, 1, 1, 1);
    glClear(GL_COLOR_BUFFER_BIT);
    gluOrtho2D(0, 600, 600, 0);

    

    glutKeyboardFunc(keyboard);
}

int main(int argc, char** argv){

    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE);
    glutInitWindowPosition(0, 0);
    glutInitWindowSize(600, 600);

    glutCreateWindow("Assign 2");

    glutDisplayFunc(display);

    glutMainLoop();

    return 0;
}
